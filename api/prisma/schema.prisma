generator client {
  provider = "prisma-client-js"
}

// for local
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// for hosting
// datasource db {
//   provider = "postgresql"
//   url      = process.env.DATABASE_URL
// }

model User {
  userId              String   @id  @default(uuid()) @db.VarChar(36)
  email               String   @unique @db.VarChar(255)
  password            String   @db.VarChar(128)
  username            String   @db.VarChar(50)
  age                 Int?     @db.Integer
  yearsOfExperience   Int?     @db.Integer
  preferredJobPosition String? @db.VarChar(100)
  currentProfession   String?  @db.VarChar(100)
  reviews             Review[]
  logs                Log[]
  communityPosts      CommunityPost[]
  usersDatas          UserData?
}

model Job {
  jobId                 String   @id  @default(uuid()) @db.VarChar(36)
  companyId             String   @db.VarChar(36)
  companyName           String   @db.VarChar(100)
  jobTitle              String   @db.VarChar(255)
  location              String   @db.VarChar(100)
  jobType               String   @db.VarChar(50)
  hasRemote             Boolean? @db.Boolean
  published             DateTime @db.Date
  description           String   @db.Text
  experienceLevel       String?  @db.VarChar(50)
  applicationUrl        String   @db.VarChar(255)
  language              String   @db.VarChar(50)
  clearanceRequired     Boolean  @db.Boolean
  salaryCurrency        String?  @db.VarChar(10)
  jobVacancies          Int?     @db.Integer
  company               Company  @relation(fields: [companyId], references: [companyId])
  reviews               Review[]
}

model Company {
  companyId           String   @id  @default(uuid()) @db.VarChar(36)
  companyName         String   @db.VarChar(100)
  companyWebsiteUrl   String?  @db.VarChar(255)
  companyLinkedinUrl  String?  @db.VarChar(255)
  rating              Float?
  iconUrl             String?  @db.VarChar(255)
  location            String   @db.VarChar(100)
  companySize         String   @db.VarChar(50)
  industry            String   @db.VarChar(50)
  description         String?  @db.VarChar(1000)
  jobs                Job[]
  reviews             Review[]
}

model CommunityPost {
  communityId   String   @id @default(uuid()) @db.VarChar(36)
  postTitle     String   @db.VarChar(100)
  postContent   String   @db.Text
  imageUrl      String?  @db.VarChar(255)
  postedAt      DateTime @default(now()) @db.Date
  userId        String   @db.VarChar(36)
  user          User     @relation(fields: [userId], references: [userId])
}

model Review {
  reviewId    String   @id @default(uuid()) @db.VarChar(36)
  rating      Int      @db.Integer
  reviewText  String   @db.Text
  userId      String   @db.VarChar(36)
  jobId       String?  @db.VarChar(36)
  companyId   String?  @db.VarChar(36)
  createdAt   DateTime @default(now()) @db.Date
  user        User     @relation(fields: [userId], references: [userId])
  job         Job?     @relation(fields: [jobId], references: [jobId])
  company     Company? @relation(fields: [companyId], references: [companyId])
}

model UserData {
  userDataId          String   @id  @default(uuid()) @db.VarChar(36)
  userId              String   @unique @db.VarChar(36)
  user                User?    @relation(fields: [userId], references: [userId])
  bookmarksJobsId     String[]
  bookmarksCompanyId  String[]
  pastSearchActivity  String[]
}

model Log {
  logId     String   @id @default(uuid()) @db.VarChar(36)
  isLogin   Boolean  @db.Boolean
  userEmail String   @db.VarChar(255)
  user      User     @relation(fields: [userEmail], references: [email])
}


























































































































































// generator client {
//   provider = "prisma-client-js"
// }

// //for local
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// // // for hosting
// // datasource db {
// //   provider = "postgresql"
// //   url      = process.env.DATABASE_URL
// // }


// model User {
//   userid    String    @id 
//   email     String @unique
//   password  String
//   username  String
//   age       Int?
//   year_experience   Int?
//   preferred_job     String?
//   current_profession  String?

// }


// model Job {
//   id                    Int    @id @default(autoincrement())
//   company_id            Int
//   company_name          String
//   company_logo          String?
//   company_website_url   String?
//   company_linkedin_url  String?
//   job_title             String
//   location              String
//   type_name             String
//   city_name             String?
//   city_country_name     String?
//   has_remote            Boolean?
//   published             DateTime
//   description           String
//   experience_level      String?
//   application_url       String
//   language              String
//   clearance_required    Boolean
//   salary_min            String?
//   salary_max            String?
//   salary_currency       String?
// }


// model Userdata {
//   username  String     @unique
//   jobs_bookmarks Int[]
//   company_bookmarks Int[]
//   search  String[]
// }

// model Company {
//   company_id Int @id @default(autoincrement())
//   company_name String
//   rating Float
//   icon_url String
//   location String
//   company_size String
//   industry String
//   description String?
//   reviews_cnt String?
//   salary_cnt String?
//   jos_cnt String?
// }

// model Log {
//   id Int @id
//   is_login Boolean
//   user_email String
// }

// model Community {
//   id Int @id @default(autoincrement())
//   bowl_name String
//   info String 
//   icon String
//   description String?
//   image String?
//   time String
// }
